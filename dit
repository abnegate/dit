#!/usr/bin/env sh
#
# dit - Developer Integrations Toolkit
#
# Provides glue for common tools, making it easier to use them in a consistent way while increasing productivity.
#
# Tools:
#  - docker
#  - docker-compose
#  - git
#
# Package Managers:
#  - composer
#  - npm
#  - yarn
#  - rubygems
#  - pypi
#  - swiftpm
#
# Author: Jake Barnby
#

set -e

#
# Print current git branch
#
branch() {
  branch="$(git rev-parse --abbrev-ref HEAD)"
  if [ "${branch}" = "HEAD" ]; then
    branch="$(git describe --tags)"
  fi
  printf "%s\n" "${branch}"
}

#
# Build the project
#
build() {
  docker-compose build "$@"
}

#
# Commit the current changes
#
commit() {
  git commit -m "$1"
}

#
# Print git diff
#
diff() {
  printf "%s\n" "$(git -c color.ui=always diff "$@")"
}

#
# Bring down project
#
down() {
  docker compose down "$*"
}

#
# Display project status using lazydocker
#
info() {
  if [ -z "$(which lazydocker)" ]; then
    printf "%s\n" "lazydocker is not installed"
    exit 1
  fi
  lazydocker
}

#
# Install dependencies from composer, npm, yarn, rubygems and pypi if their package files are found
#
install() {
  reinstall -i
}

#
# Pull down the latest changes from the remote repository
#
pull() {
  git pull "$@"
}

#
# Push changes to remote
#
push() {
  git push "$@"
}

#
# Restart project
#
restart() {
  docker-compose restart "$@"
}

#
# Reinstall dependencies from composer, npm, yarn, rubygems and pypi if their package files are found
#
reinstall() {
  clean="true"
  if [ "$1" = "-i" ]; then
    clean="false"
  fi

  if [ -f "composer.json" ]; then
    printf "%s\n" "Installing composer dependencies..."
    [ "${clean}" = "true" ] && rm -rf vendor || true
    docker run --interactive --tty --volume "$(pwd):/app" composer install \
      --ignore-platform-reqs \
      --optimize-autoloader \
      --no-plugins \
      --no-scripts \
      --prefer-dist
  fi

  if [ -f "package.json" ]; then
    printf "%s\n" "Installing npm dependencies..."
    [ "${clean}" = "true" ] && rm -rf node_modules || true
    docker run --interactive --tty --volume "$(pwd):/app" --workdir "/app" node npm install
  fi
  if [ -f "yarn.lock" ]; then
    printf "%s\n" "Installing yarn dependencies..."
    [ "${clean}" = "true" ] && rm -rf node_modules || true
    docker run --interactive --tty --volume "$(pwd):/app" --workdir "/app" node yarn install
  fi
  if [ -f "Gemfile" ]; then
    printf "%s\n" "Installing RubyGems dependencies..."
    [ "${clean}" = "true" ] && rm -rf vendor || true
    docker run --interactive --tty --volume "$(pwd):/app" --workdir "/app" ruby bundle install
  fi
  if [ -f "requirements.txt" ]; then
    printf "%s\n" "Installing PyPI dependencies..."
    [ "${clean}" = "true" ] && rm -rf vendor || true
    docker run --interactive --tty --volume "$(pwd):/app" --workdir "/app" python pip install -r requirements.txt
  fi
  if [ -f "Package.swift" ]; then
    printf "%s\n" "Installing Swift dependencies..."
    [ "${clean}" = "true" ] && rm -rf .build || true
    docker run --interactive --tty --volume "$(pwd):/app" --workdir "/app" swiftarm/swift swift package resolve
  fi
}

#
# Bring the project down then back up
#
reup() {
  # Double iterate arguments to support splatting
  while [ $# -gt 0 ]; do
    idx=0
    var="$1"
    while [ $idx -lt 3 ]; do
      case $var in
      -v | --volumes)
        volumes="--volumes"
        idx=4
        ;;
      -b | --build)
        up="${up} --build"
        idx=4
        ;;
      -d | --detach)
        up="${up} --detach"
        idx=4
        ;;
      -v[db] | -v[db][db] | -[db]v | -[db][db]v | -[db]v[db])
        volumes="--volumes"
        var="$(printf "%s\n" "$var" | sed 's/v//g')"
        ;;
      -b[vd] | -b[vd][vd] | -[vd]b | -[vd][vd]b | -[vd]b[vd])
        up="${up} --build"
        var="$(printf "%s\n" "$var" | sed 's/b//g')"
        ;;
      -d[vb] | -d[vb][vb] | -[vb]d | -[vb][vb]d | -[vb]d[vb])
        up="${up} --detach"
        var="$(printf "%s\n" "$var" | sed 's/d//g')"
        ;;
      esac
      idx=$((idx + 1))
    done
    shift
  done

  docker-compose down ${volumes}
  docker-compose up ${up}
}

#
# Run a command on a container instance. Will use a named container from the
# current project, or on a named image if the global option is set.
#
run() {
  args=""
  global="false"
  image=""
  while [ $# -gt 0 ]; do
    case $1 in
    -g | --global)
      global="true"
      shift
      image="$1"
      shift
      ;;
    *)
      args="${args} $1"
      shift
      ;;
    esac
  done

  if [ "${global}" = "true" ]; then
    if [ -z "${image}" ]; then
      printf "%s\n" "Image name is required for global run."
      exit 1
    fi

    docker run --rm --interactive --tty "${image}" ${args}
  fi

  docker-compose exec --interactive --tty ${args}
}

#
# Spawn a shell on a container instance. Will use a named container from the
# current project, or on a named image if the global option is set.
#
shell() {
  run "$@" sh
}

#
# Swap project between git branches
#
swap() {
  branch_name="$1"
  shift

  if [ -z "${branch_name}" ]; then
    printf "%s\n" "Branch name is required"
    exit 1
  fi

  case "${branch_name}" in
  last*)
    branch_name=$(printf "%s\n" "${branch_name}" | sed 's/last//g')
    if [ -z "${branch_name}" ]; then
      branch_name=$(__load_last_branch)
    else
      branch_name=$(printf "%s\n" "${branch_name}" | sed 's/-n //g')
      case "${branch_name}" in
      '' | *[!0-9]*)
        printf "%s\n" "Last branch with indexing must provide a number for the -n option"
        exit 1
        ;;
      *) ;;
      esac
      count=$(__get_branch_count)
      count=$((count - branch_name))
      branch_name=$(__load_branch "${count}")
    fi
    ;;
  *) ;;

  esac

  # Double iterate arguments to support splatting
  while [ $# -gt 0 ]; do
    idx=0
    var="$1"
    while [ $idx -lt 3 ]; do
      case $var in
      -v | --volumes)
        volumes="--volumes"
        idx=4
        ;;
      -s | --stash)
        stash="true"
        idx=4
        ;;
      -a | --apply)
        apply="true"
        idx=4
        ;;
      -p | --pull)
        pull="true"
        idx=4
        ;;
      -n | --no-up)
        no_up="true"
        idx=4
        ;;
      -i | --reinstall)
        reinstall_deps="true"
        idx=4
        ;;
      -v[sa] | -v[sa][sa] | -[sa]v | -[sa][sa]v | -[sa]v[sa])
        volumes="--volumes"
        var="$(printf "%s" "$var" | sed 's/v//g')"
        ;;
      -s[va] | -s[va][va] | -[va]s | -[va][va]s | -[va]s[va])
        stash="true"
        var="$(printf "%s" "$var" | sed 's/s//g')"
        ;;
      -a[vs] | -a[vs][vs] | -[vs]a | -[vs][vs]a | -[vs]a[vs])
        apply="true"
        var="$(printf "%s" "$var" | sed 's/a//g')"
        ;;
      esac
      idx=$((idx + 1))
    done
    shift
  done

  current_branch=$(branch)

  if [ "${branch_name}" != "${current_branch}" ]; then
    down "${volumes}" || true

    if [ -n "${stash}" ]; then
      git stash --include-untracked
    fi

    git checkout "${branch_name}"

    if [ -n "${pull}" ]; then
      git pull
    fi

    if [ -n "${apply}" ]; then
      git stash pop
    fi
  fi

  if [ -z "${no_up}" ]; then
    up --build --detach --recreate --cleanup
  fi

  if [ -n "${reinstall_deps}" ]; then
    reinstall
  fi
}

#
# Bring up project
#
up() {
  # Double iterate arguments to support splatting
  while [ $# -gt 0 ]; do
    idx=0
    var="$1"
    while [ $idx -lt 4 ]; do
      case $var in
      -b | --build)
        up="${up} --build"
        idx=4
        ;;
      -d | --detach)
        up="${up} --detach"
        idx=4
        ;;
      -r | --recreate)
        up="${up} --force-recreate"
        idx=4
        ;;
      -c | --cleanup)
        up="${up} --remove-orphans"
        idx=4
        ;;
      -r[dbc][dbc][dbc] | -r[dbc][dbc] | -r[dbc] | -[dbc][dbc][dbc]r | -[dbc][dbc]r | -[dbc]r | -[dbc]r[dbc][dbc] | -[dbc][dbc]r[dbc] | -[dbc]r[dbc])
        up="${up} --force-recreate"
        var="$(printf "%s" "$var" | sed 's/r//g')"
        ;;
      -b[drc][drc][drc] | -b[drc][drc] | -b[drc] | -[drc][drc][drc]b | -[drc][drc]b | -[drc]b | -[drc]b[drc][drc] | -[drc][drc]b[drc] | -[drc]b[drc])
        up="${up} --build"
        var="$(printf "%s" "$var" | sed 's/b//g')"
        ;;
      -d[brc][brc][brc] | -d[brc][brc] | -d[brc] | -[brc][brc][brc]d | -[brc][brc]d | -[brc]d | -[brc]d[brc][brc] | -[brc][brc]d[brc] | -[brc]d[brc])
        up="${up} --detach"
        var="$(printf "%s" "$var" | sed 's/d//g')"
        ;;
      -c[brd][brd][brd] | -c[brd][brd] | -c[brd] | -[brd][brd][brd]c | -[brd][brd]c | -[brd]c | -[brd]c[brd][brd] | -[brd][brd]c[brd] | -[brd]c[brd])
        up="${up} --remove-orphans"
        var="$(printf "%s" "$var" | sed 's/c//g')"
        ;;
      esac
      idx=$((idx + 1))
    done
    shift
  done

  docker-compose up ${up}

  __save_branch
}

#
# Print usage
#
usage() {
  printf "%s" "
Usage: dit <command> [options]
    dit branch                  Print the current branch.
    dit build <options>         Build the current project.
    dit commit <message>        Commit the current project.
    dit down <options>          Bring the current project down.
        -v, --volumes           Remove volumes
    dit diff <options>          Print the diff of the current branch.
    dit help                    Print this message.
    dit info                    Display project status using lazydocker.
    dit install                 Install the current project dependencies (supports composer, npm, yarn, rubygems, pypi, swiftpm).
    dit pull <options>          Pull the current branch.
    dit push <options>          Push the current branch.
    dit reup <options>          Bring the current project down then back up.
        -v, --volumes           Remove volumes (splattable)
        -b, --build             Build the project before bringing it up (splattable)
        -d, --detach            Detach from the project after bringing it up (splattable)
    dit restart <options>       Restart the current project, or a specific container.
    dit reinstall               Reinstall the current project dependencies (supports composer, npm, yarn, rubygems, pypi, swiftpm).
    dit run <command>           Run a command on a container instance.
        -g, --global <image>    Run a command on a global image.
    dit sh <options>            Spawn a shell on a container instance.
        -g, --global <image>    Spawn a shell on a global image.
    dit swap <branch>           Swap to a new branch, bringing the current project down and back up.
        -v, --volumes           Remove volumes (splattable)
        -s, --stash             Stash the current branch before swapping (splattable)
        -a, --apply             Apply the stash after swapping (splattable)
        -p, --pull              Pull the new branch after swapping
        -n, --no-up             Do not bring the project up after swapping
        -i, --reinstall         Reinstall the project dependencies after swapping (supports composer, npm, yarn, rubygems, pypi, swiftpm)
    dit up <options>            Bring the current project up.
        -b, --build             Build the project before bringing it up (splattable)
        -d, --detach            Detach from the project after bringing it up (splattable)
        -r, --recreate          Recreate the container before bringing it up (splattable)
        -c, --cleanup           Cleanup orphans from project before bringing it up (splattable)

    Examples:
        dit branch                               | dit br
        dit down --volumes                       | dit d -v
        dit install                              | dit i
        dit reup --build --detach --volumes      | dit reup -bdv
        dit restart                              | dit res
        dit run container ls                     | dit r container ls
        dit run 'echo h' -g composer             | dit r 'echo h' -g composer
        dit sh -g alpine                         | dit sh -g alpine
        dit sh container1                        | dit sh container1
        dit swap master --volumes                | dit s master -v
        dit swap 1.0 --stash --apply             | dit s 1.0 -sa
        dit swap 2.0 --pull --reinstall          | dit s 2.0 -p -i
        dit up --build --detach --recreate       | dit u -bdr
  "
}

#
# Save the current branch name to a list in a file
#
__save_branch() {
  if [ -z "${branch_name}" ]; then
    branch_name=$(branch)
  fi

  if [ -z "${swap_file}" ]; then
    swap_file="${HOME}/.ditfile"
  fi

  if [ -f "${swap_file}" ]; then
    swap_list=$(cat "${swap_file}")
  else
    swap_list=""
  fi

  if [ -z "${swap_list}" ]; then
    swap_list="$(pwd)::${branch_name}"
  else
    case "${swap_list}" in
    *"$(pwd)::${branch_name}"*) swap_list=$(printf "%s" "${swap_list}" | sed "s/${$(pwd)::branch_name}//g" | sed "/^[[:space:]]*$/d") ;;
    *) ;;
    esac

    swap_list="${swap_list}
$(pwd)::${branch_name}"
  fi

  printf "%s" "${swap_list}" >"${swap_file}"
}

#
# Get the count of all branches
#
__get_branch_count() {
  if [ -z "${swap_file}" ]; then
    swap_file="${HOME}/.ditfile"
  fi

  if [ -f "${swap_file}" ]; then
    swap_list=$(cat "${swap_file}")
  else
    swap_list=""
  fi

  # Remove lines that do not begin with the current directory
  swap_list=$(printf "%s" "${swap_list}" | sed "s/^.*$(pwd):://g" | sed "/^[[:space:]]*$/d")

  return "$(printf "%s" "${swap_list}"  | wc -l)"
}

#
# Get the branch name at a specific index from a file
#
__load_branch() {
  index=$1
  if [ -z "${swap_file}" ]; then
    swap_file="${HOME}/.ditfile"
  fi

  if [ -f "${swap_file}" ]; then
    swap_list=$(cat "${swap_file}")
  else
    swap_list=""
  fi

  # Remove lines that do not begin with the current directory
  swap_list=$(printf "%s" "${swap_list}" | sed "s/^.*$(pwd):://g" | sed "/^[[:space:]]*$/d")

  printf "%s" "${swap_list}" | head -n "${index}" | tail -n 1
}

#
# Get the most recent branch name from a file
#
__load_last_branch() {
  if [ -z "${swap_file}" ]; then
    swap_file="${HOME}/.ditfile"
  fi

  if [ -f "${swap_file}" ]; then
    swap_list=$(cat "${swap_file}")
  else
    swap_list=""
  fi

  # Remove lines that do not begin with the current directory
  swap_list=$(printf "%s" "${swap_list}" | sed "s/^.*$(pwd):://g" | sed "/^[[:space:]]*$/d")

  branch=$(printf "%s" "${swap_list}" | tail -n 1)
  if [ "${branch}" = "$(branch)" ]; then
    count=$(printf "%s" "${swap_list}" | wc -l)
    count=$((count - 1))
    branch=$(printf "%s" "${swap_list}" | head -n "${count}" | tail -n 1)
  fi

  printf "%s\n" "${branch}"
}

main() {
  while [ $# -gt 0 ]; do
    case $1 in
    b|build)
      shift
      build "$@"
      exit
      ;;
    br|branch)
      branch
      exit
      ;;
    c|commit)
      shift
      commit "$@"
      exit
      ;;
    di|diff)
      shift
      diff "$@"
      exit
      ;;
    d|down)
      shift
      down "$@"
      exit
      ;;
    inf|info)
      info
      exit
      ;;
    i|install)
      shift
      install "$@"
      exit
      ;;
    p|pull)
      shift
      pull "$@"
      exit
      ;;
    ps|push)
      shift
      pull "$@"
      exit
      ;;
    res|restart)
      shift
      restart "$@"
      exit
      ;;
    ru|reup)
      shift
      reup "$@"
      exit
      ;;
    ri|reinstall)
      shift
      reinstall "$@"
      exit
      ;;
    r|run)
      shift
      run "$@"
      exit
      ;;
    sh)
      shift
      shell "$@"
      exit
      ;;
    s|swap)
      shift
      swap "$@"
      exit
      ;;
    u|up)
      shift
      up "$@"
      exit
      ;;
    --help|help|-h|h)
      usage
      exit
      ;;
    *)
      printf "%s\n" "Unknown option: $1"
      exit 1
      ;;
    esac
  done
}

main "$@"
